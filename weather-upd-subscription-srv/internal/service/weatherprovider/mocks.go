// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package weatherprovider

import (
	"context"

	"github.com/GenesisEducationKyiv/software-engineering-school-5-0-denyshuzovskyi/weather-upd-subscription-srv/internal/client/weatherapi"
	"github.com/GenesisEducationKyiv/software-engineering-school-5-0-denyshuzovskyi/weather-upd-subscription-srv/internal/client/weatherstack"
	"github.com/GenesisEducationKyiv/software-engineering-school-5-0-denyshuzovskyi/weather-upd-subscription-srv/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache) Get(context1 context.Context, s string) (dto.WeatherWithLocationDTO, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 dto.WeatherWithLocationDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (dto.WeatherWithLocationDTO, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) dto.WeatherWithLocationDTO); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Get(0).(dto.WeatherWithLocationDTO)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockCache_Expecter) Get(context1 interface{}, s interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", context1, s)}
}

func (_c *MockCache_Get_Call) Run(run func(context1 context.Context, s string)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(weatherWithLocationDTO dto.WeatherWithLocationDTO, err error) *MockCache_Get_Call {
	_c.Call.Return(weatherWithLocationDTO, err)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(context1 context.Context, s string) (dto.WeatherWithLocationDTO, error)) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCache
func (_mock *MockCache) Set(context1 context.Context, s string, weatherWithLocationDTO dto.WeatherWithLocationDTO) error {
	ret := _mock.Called(context1, s, weatherWithLocationDTO)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, dto.WeatherWithLocationDTO) error); ok {
		r0 = returnFunc(context1, s, weatherWithLocationDTO)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - weatherWithLocationDTO dto.WeatherWithLocationDTO
func (_e *MockCache_Expecter) Set(context1 interface{}, s interface{}, weatherWithLocationDTO interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set", context1, s, weatherWithLocationDTO)}
}

func (_c *MockCache_Set_Call) Run(run func(context1 context.Context, s string, weatherWithLocationDTO dto.WeatherWithLocationDTO)) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 dto.WeatherWithLocationDTO
		if args[2] != nil {
			arg2 = args[2].(dto.WeatherWithLocationDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_Set_Call) Return(err error) *MockCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(context1 context.Context, s string, weatherWithLocationDTO dto.WeatherWithLocationDTO) error) *MockCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheMetrics creates a new instance of MockCacheMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheMetrics {
	mock := &MockCacheMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheMetrics is an autogenerated mock type for the CacheMetrics type
type MockCacheMetrics struct {
	mock.Mock
}

type MockCacheMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheMetrics) EXPECT() *MockCacheMetrics_Expecter {
	return &MockCacheMetrics_Expecter{mock: &_m.Mock}
}

// RecordCacheError provides a mock function for the type MockCacheMetrics
func (_mock *MockCacheMetrics) RecordCacheError() {
	_mock.Called()
	return
}

// MockCacheMetrics_RecordCacheError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordCacheError'
type MockCacheMetrics_RecordCacheError_Call struct {
	*mock.Call
}

// RecordCacheError is a helper method to define mock.On call
func (_e *MockCacheMetrics_Expecter) RecordCacheError() *MockCacheMetrics_RecordCacheError_Call {
	return &MockCacheMetrics_RecordCacheError_Call{Call: _e.mock.On("RecordCacheError")}
}

func (_c *MockCacheMetrics_RecordCacheError_Call) Run(run func()) *MockCacheMetrics_RecordCacheError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheMetrics_RecordCacheError_Call) Return() *MockCacheMetrics_RecordCacheError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheMetrics_RecordCacheError_Call) RunAndReturn(run func()) *MockCacheMetrics_RecordCacheError_Call {
	_c.Run(run)
	return _c
}

// RecordCacheHit provides a mock function for the type MockCacheMetrics
func (_mock *MockCacheMetrics) RecordCacheHit() {
	_mock.Called()
	return
}

// MockCacheMetrics_RecordCacheHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordCacheHit'
type MockCacheMetrics_RecordCacheHit_Call struct {
	*mock.Call
}

// RecordCacheHit is a helper method to define mock.On call
func (_e *MockCacheMetrics_Expecter) RecordCacheHit() *MockCacheMetrics_RecordCacheHit_Call {
	return &MockCacheMetrics_RecordCacheHit_Call{Call: _e.mock.On("RecordCacheHit")}
}

func (_c *MockCacheMetrics_RecordCacheHit_Call) Run(run func()) *MockCacheMetrics_RecordCacheHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheMetrics_RecordCacheHit_Call) Return() *MockCacheMetrics_RecordCacheHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheMetrics_RecordCacheHit_Call) RunAndReturn(run func()) *MockCacheMetrics_RecordCacheHit_Call {
	_c.Run(run)
	return _c
}

// RecordCacheMiss provides a mock function for the type MockCacheMetrics
func (_mock *MockCacheMetrics) RecordCacheMiss() {
	_mock.Called()
	return
}

// MockCacheMetrics_RecordCacheMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordCacheMiss'
type MockCacheMetrics_RecordCacheMiss_Call struct {
	*mock.Call
}

// RecordCacheMiss is a helper method to define mock.On call
func (_e *MockCacheMetrics_Expecter) RecordCacheMiss() *MockCacheMetrics_RecordCacheMiss_Call {
	return &MockCacheMetrics_RecordCacheMiss_Call{Call: _e.mock.On("RecordCacheMiss")}
}

func (_c *MockCacheMetrics_RecordCacheMiss_Call) Run(run func()) *MockCacheMetrics_RecordCacheMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheMetrics_RecordCacheMiss_Call) Return() *MockCacheMetrics_RecordCacheMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheMetrics_RecordCacheMiss_Call) RunAndReturn(run func()) *MockCacheMetrics_RecordCacheMiss_Call {
	_c.Run(run)
	return _c
}

// NewMockWeatherProvider creates a new instance of MockWeatherProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherProvider {
	mock := &MockWeatherProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeatherProvider is an autogenerated mock type for the WeatherProvider type
type MockWeatherProvider struct {
	mock.Mock
}

type MockWeatherProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherProvider) EXPECT() *MockWeatherProvider_Expecter {
	return &MockWeatherProvider_Expecter{mock: &_m.Mock}
}

// GetCurrentWeather provides a mock function for the type MockWeatherProvider
func (_mock *MockWeatherProvider) GetCurrentWeather(context1 context.Context, s string) (*dto.WeatherWithLocationDTO, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentWeather")
	}

	var r0 *dto.WeatherWithLocationDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dto.WeatherWithLocationDTO, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dto.WeatherWithLocationDTO); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.WeatherWithLocationDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeatherProvider_GetCurrentWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentWeather'
type MockWeatherProvider_GetCurrentWeather_Call struct {
	*mock.Call
}

// GetCurrentWeather is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockWeatherProvider_Expecter) GetCurrentWeather(context1 interface{}, s interface{}) *MockWeatherProvider_GetCurrentWeather_Call {
	return &MockWeatherProvider_GetCurrentWeather_Call{Call: _e.mock.On("GetCurrentWeather", context1, s)}
}

func (_c *MockWeatherProvider_GetCurrentWeather_Call) Run(run func(context1 context.Context, s string)) *MockWeatherProvider_GetCurrentWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWeatherProvider_GetCurrentWeather_Call) Return(weatherWithLocationDTO *dto.WeatherWithLocationDTO, err error) *MockWeatherProvider_GetCurrentWeather_Call {
	_c.Call.Return(weatherWithLocationDTO, err)
	return _c
}

func (_c *MockWeatherProvider_GetCurrentWeather_Call) RunAndReturn(run func(context1 context.Context, s string) (*dto.WeatherWithLocationDTO, error)) *MockWeatherProvider_GetCurrentWeather_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeatherapiClient creates a new instance of MockWeatherapiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherapiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherapiClient {
	mock := &MockWeatherapiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeatherapiClient is an autogenerated mock type for the WeatherapiClient type
type MockWeatherapiClient struct {
	mock.Mock
}

type MockWeatherapiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherapiClient) EXPECT() *MockWeatherapiClient_Expecter {
	return &MockWeatherapiClient_Expecter{mock: &_m.Mock}
}

// GetCurrentWeather provides a mock function for the type MockWeatherapiClient
func (_mock *MockWeatherapiClient) GetCurrentWeather(context1 context.Context, s string) (*weatherapi.CurrentWeather, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentWeather")
	}

	var r0 *weatherapi.CurrentWeather
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*weatherapi.CurrentWeather, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *weatherapi.CurrentWeather); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weatherapi.CurrentWeather)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeatherapiClient_GetCurrentWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentWeather'
type MockWeatherapiClient_GetCurrentWeather_Call struct {
	*mock.Call
}

// GetCurrentWeather is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockWeatherapiClient_Expecter) GetCurrentWeather(context1 interface{}, s interface{}) *MockWeatherapiClient_GetCurrentWeather_Call {
	return &MockWeatherapiClient_GetCurrentWeather_Call{Call: _e.mock.On("GetCurrentWeather", context1, s)}
}

func (_c *MockWeatherapiClient_GetCurrentWeather_Call) Run(run func(context1 context.Context, s string)) *MockWeatherapiClient_GetCurrentWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWeatherapiClient_GetCurrentWeather_Call) Return(currentWeather *weatherapi.CurrentWeather, err error) *MockWeatherapiClient_GetCurrentWeather_Call {
	_c.Call.Return(currentWeather, err)
	return _c
}

func (_c *MockWeatherapiClient_GetCurrentWeather_Call) RunAndReturn(run func(context1 context.Context, s string) (*weatherapi.CurrentWeather, error)) *MockWeatherapiClient_GetCurrentWeather_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeatherstackClient creates a new instance of MockWeatherstackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherstackClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherstackClient {
	mock := &MockWeatherstackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeatherstackClient is an autogenerated mock type for the WeatherstackClient type
type MockWeatherstackClient struct {
	mock.Mock
}

type MockWeatherstackClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherstackClient) EXPECT() *MockWeatherstackClient_Expecter {
	return &MockWeatherstackClient_Expecter{mock: &_m.Mock}
}

// GetCurrentWeather provides a mock function for the type MockWeatherstackClient
func (_mock *MockWeatherstackClient) GetCurrentWeather(context1 context.Context, s string) (*weatherstack.CurrentWeather, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentWeather")
	}

	var r0 *weatherstack.CurrentWeather
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*weatherstack.CurrentWeather, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *weatherstack.CurrentWeather); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weatherstack.CurrentWeather)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeatherstackClient_GetCurrentWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentWeather'
type MockWeatherstackClient_GetCurrentWeather_Call struct {
	*mock.Call
}

// GetCurrentWeather is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockWeatherstackClient_Expecter) GetCurrentWeather(context1 interface{}, s interface{}) *MockWeatherstackClient_GetCurrentWeather_Call {
	return &MockWeatherstackClient_GetCurrentWeather_Call{Call: _e.mock.On("GetCurrentWeather", context1, s)}
}

func (_c *MockWeatherstackClient_GetCurrentWeather_Call) Run(run func(context1 context.Context, s string)) *MockWeatherstackClient_GetCurrentWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWeatherstackClient_GetCurrentWeather_Call) Return(currentWeather *weatherstack.CurrentWeather, err error) *MockWeatherstackClient_GetCurrentWeather_Call {
	_c.Call.Return(currentWeather, err)
	return _c
}

func (_c *MockWeatherstackClient_GetCurrentWeather_Call) RunAndReturn(run func(context1 context.Context, s string) (*weatherstack.CurrentWeather, error)) *MockWeatherstackClient_GetCurrentWeather_Call {
	_c.Call.Return(run)
	return _c
}
