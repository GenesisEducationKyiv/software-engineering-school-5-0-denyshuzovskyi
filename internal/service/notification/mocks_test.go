// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notification

import (
	"context"

	"github.com/GenesisEducationKyiv/software-engineering-school-5-0-denyshuzovskyi/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEmailSender creates a new instance of MockEmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailSender {
	mock := &MockEmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmailSender is an autogenerated mock type for the EmailSender type
type MockEmailSender struct {
	mock.Mock
}

type MockEmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailSender) EXPECT() *MockEmailSender_Expecter {
	return &MockEmailSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockEmailSender
func (_mock *MockEmailSender) Send(context1 context.Context, simpleEmail dto.SimpleEmail) error {
	ret := _mock.Called(context1, simpleEmail)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.SimpleEmail) error); ok {
		r0 = returnFunc(context1, simpleEmail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockEmailSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - context1 context.Context
//   - simpleEmail dto.SimpleEmail
func (_e *MockEmailSender_Expecter) Send(context1 interface{}, simpleEmail interface{}) *MockEmailSender_Send_Call {
	return &MockEmailSender_Send_Call{Call: _e.mock.On("Send", context1, simpleEmail)}
}

func (_c *MockEmailSender_Send_Call) Run(run func(context1 context.Context, simpleEmail dto.SimpleEmail)) *MockEmailSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.SimpleEmail
		if args[1] != nil {
			arg1 = args[1].(dto.SimpleEmail)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEmailSender_Send_Call) Return(err error) *MockEmailSender_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailSender_Send_Call) RunAndReturn(run func(context1 context.Context, simpleEmail dto.SimpleEmail) error) *MockEmailSender_Send_Call {
	_c.Call.Return(run)
	return _c
}
